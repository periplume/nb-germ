#!/usr/bin/env bash
###############################################################################
# germ
#
# A plugin for `nb` providing a "germ" notebook interface for easy idea entry
#
# Install with:
# $ nb plugin install https://github.com/periplume/nb-germ/blob/master/germ.nb-plugin
#
# germ:  https://github.com/periplume/nb-germ
# nb:    https://github.com/xwmx/nb
# germ version:
_germ_version=1.0
# germ notebook in nb
_germ_nb="germ"
###############################################################################

# Add the new subcommand names with `_subcommands add <name>`.
_subcommands add "germ"

# Define help and usage text with `_subcommands describe <subcommand> <usage>`.
_subcommands describe "germ" <<HEREDOC
Usage:
  nb germ
  nb germ add [<tag1> <tag2> ...]
  nb germ add source (<source>) [<tag1> <tag2> ...]
  nb germ edit (<id> | <filename> | <path> | <title>)
  nb germ init
  nb germ (list | ls)
  nb germ print [last|<index>]
  nb germ promote
  nb germ source (add|edit|print)
  nb germ tags (add|edit|list)
  nb germ thresh
  nb germ:*       <-- access to all nb commands, eg:
  nb germ:show (<id> | <filename> | <path> | <title>)

Options:
  --force
  --noprompt

Description:
	Create a new file in germ notebook with tag(s) prepended

HEREDOC

_germ() {
	local _force=0
	local _prompt=1
	local _germ_command=
	local _germ_subcommand=
	local _germ_subcommand_args=()
	local _germ_log="logs/germ.log"
	local _source_log="logs/source.log"
	local _publish_log="logs/publish.log"
	local _tagwatch_log="logs/tagwatch.log"
	# create log variables
	# - lists _gLog() builds before writing a colsolidated log
	export _gLog_germlog=()
	export _gLog_publishlog=()

	# logging facility
	# _gLog <type> "log message info"
	_gLog() {
		# build array of log lines to be written at once
		# logtype     logfile
		#---------------------
		# add         germ.log
		# edit        germ.log
		# move        germ.log
		# import      germ.log
		# tag         germ.log
		# promote     publish.log
		# print       publish.log
		# pdf         publish.log
		# pipe        publish.log
		# file        publish.log
		# email       publish.log
		# germ.log tracks all changes to germ git repo
		# publish.log tracks all output from germ
		# TODO
		# flush logs at 50 lines for bulk imports (eg)?
		local _timestamp=$(date +%s)
		local _logtype=${1:-}
		local _logmessage=${@:2}
		# strip out non-printable ascii characters in case they made their way in (they have)
		local _message=$(tr -d '[[:cntrl:]]' <<< ${_logmessage})
		if [[ "${_logtype}" =~ ^promote$|^print$|^pdf$|^pipe$|^file$|^email$ ]]
		then
			_gLog_publishlog+=($(printf "${_timestamp} ${_logtype} ${_logmessage}")$'\n')
		else
			_gLog_germlog+=($(printf "${_timestamp} ${_logtype} ${_logmessage}")$'\n')
		fi
	}
	
	# process flags and germ commands first
	#_debug echo "germ_arguments= ${@}"
	for __arg in "${@}"
	do
		case "${__arg}" in
			# check for germ global options
			--force)
				_force=1
				;;
			--noprompt)
				_prompt=0
				;;
			--help)
				_help ${_ME}
				;;
			*)
				# everything else
				if [[ -z "${_germ_command}" ]]
				then
					# set all germ commands and aliases here
					#
					# to add a function to germ, start here.  first add the function name below in this unruly list.
					# next add any subcommand modifiers if they exist.  see the case statements where all subcommands
					# are defined...notice how source and tags have subcommand arguments...they are treated as...subcommands
					if [[ "${__arg}" =~	^list$|^ls$|^init$|^add$|^import$|^edit$|^report$|^source$|^tags$|^thresh$|^promote$|^print$ ]]
					then
						_germ_command="${__arg}"
					fi
				elif [[ ! -z "${_germ_command}" ]] && [[ -z "${_germ_subcommand}" ]]
				then
					# define all subcommands per germ command here
					# we are filtering for special subcommands here...in case anything shall not be treated as an
					# argument in that context but instead a verb or modifier...a subcommand itself
					case "${_germ_command}" in
						add)
							if [[ "${__arg:-}" =~ ^reserved$ ]]
							then
								_germ_subcommand="${__arg}"
							else
								_germ_subcommand_args+=("${__arg}")
							fi
							;;
						edit)
							if [[ "${__arg:-}" =~ ^reserved$ ]]
							then
								_germ_subcommand="${__arg}"
							else
								_germ_subcommand_args+=("${__arg}")
							fi
							;;
						import)
							if [[ "${__arg:-}" =~ ^merge$ ]]
							then
								_germ_subcommand="${__arg}"
							else
								_germ_subcommand_args+=("${__arg}")
							fi
							;;
						init)
							if [[ "${__arg:-}" =~ ^reserved$ ]]
							then
								_germ_subcommand="${__arg}"
							else
								_germ_subcommand_args+=("${__arg}")
							fi
							;;
						print)
							if [[ "${__arg:-}" =~ ^reserved$ ]]
							then
								_germ_subcommand="${__arg}"
							else
								_germ_subcommand_args+=("${__arg}")
							fi
							;;
						promote)
							if [[ "${__arg:-}" =~ ^reserved$ ]]
							then
								_germ_subcommand="${__arg}"
							else
								_germ_subcommand_args+=("${__arg}")
							fi
							;;
						report)
							if [[ "${__arg:-}" =~ ^reserved$ ]]
							then
								_germ_subcommand="${__arg}"
							else
								_germ_subcommand_args+=("${__arg}")
							fi
							;;
						source)
							#
							# this is an example of how to add subcommands to the germ subcommand
							# they can also be keywords for parameter or mode setting
							# to add "keyword on|off" type switches would be easily done here as well
							# add the subcommand name in the list below
							if [[ "${__arg:-}" =~ ^add$|^edit$|^print$ ]]
							then
								_germ_subcommand="${__arg}"
							else
								_germ_subcommand_args+=("${__arg}")
							fi
							;;
						tags)
							if [[ "${__arg:-}" =~ ^add$|^edit$|^list$ ]]
							then
								_germ_subcommand="${__arg}"
							else
								_germ_subcommand_args+=("${__arg}")
							fi
							;;
						thresh)
							if [[ "${__arg:-}" =~ ^reserved$ ]]
							then
								_germ_subcommand="${__arg}"
							else
								_germ_subcommand_args+=("${__arg}")
							fi
							;;
					esac
				else
					_germ_subcommand_args+=("${__arg}")
				fi
				;;
		esac
	done
	# === debug ===
	#echo "germ_command= ${_germ_command}"
	#echo "germ_subcommand= ${_germ_subcommand}"
	#echo "germ_subcommand_args= ${_germ_subcommand_args[@]}"

	# print help if no arguments (or illegal command)
  [[ -z "${_germ_command:-}" ]] && _help -p "germ" 1>&2 && exit


  # process subcommand args
  case "${_germ_command}" in
    add)
			local _timestamp_unix=$(date +%s)
			local _timestamp=$(date '+%F--%I-%M-%S-%P' --date @${_timestamp_unix})
			local _new_filename="${_timestamp}.txt"
			# metadata accounting
			# tags = tag count
			# added_disk_usage = ?
			# git_count_objects = count size(KiB)
			
			# switch to germ if not...--info-line returns differently
			nb use germ

			local _taglist=()    # the list of tags we detected as arguments
			local _tagline=      # the tagline we add to the first line
			local _prepend=      # the whole prepend content for the file
			local _incoming_dir="fresh"
			local _new_filename_path="fresh/${_new_filename}"
			
			# make sure germ has been initialized and this filename does not exist
			if ! (_notebooks show germ &>/dev/null)
			then
        _exit_1 printf "germ notebook missing...run 'germ init'\\n"
			elif (nb germ:show -u "${_new_filename_path}" &>/dev/null)
			then
				sleep 1
				# wait a second in case of too-quick create (unique filename granularity is one second)
				if (nb germ:show -u "${_new_filename_path}" &>/dev/null)
				then
					# this shouldn't happen...unless the system time changed ... probably will create problems with time change!
					_exit_1 printf "error: ${_new_filename_path} already exists: strange inconsistency detected"
				fi
			fi
			
			# catch source override keyword (if present) and build taglist
			if [[ -z "${_germ_subcommand:-}" ]] && [[ "${_germ_subcommand_args[0]:-}" == "source" ]]
			then
				__source_tag="${_germ_subcommand_args[1]:-}"
				_taglist="${_germ_subcommand_args[@]:2}"
			else
				__source_tag=$(nb germ:show "${_source_log}" --no-color --print | head -1 | cut -f1 -d:)
				_taglist="${_germ_subcommand_args[@]:-}"
			fi
			
			# check for tags in the args then format _prepend
			# ? limit tag count?
			if [[ -z "${_taglist:-}" ]]
			then
				_tagline+="# untagged"
			else
				_tagline+="#"
				for __tag in "${_taglist[@]}"
				do
					_tagline+=" ${__tag}"
				done
			fi

			# finalize the pre-populated germ template with blank lines and the source tag
			_prepend+="${_tagline}"$'\n\n\n\n'"#src ${__source_tag}"
		
			# create a new entry (and keep a timer on the edit session)
			__start=$(date +%s)
			nb germ:add --content "${_prepend}" --edit -f "${_new_filename}" --folder "${_incoming_dir}"
			__end=$(date +%s)
			__elapsed=$((__end-__start))
			
			# read the saved germ into an array and gather metadata, check format, etc, and log results
			__germ_array=($(nb germ:show "${_new_filename_path}" --no-color --print))
			__germ_body=(${__germ_array[@]})
			local _corrupt=0
			
			# check that tagline is correct "^# [a-z]*"
			if [[ ! "${__germ_array[0]}" =~ (^# [a-zA-Z0-9]) ]]  # do we need to add dash and underscore?
			then
				# tagline corrupt, replace written tagline with _tagline and leave first line in body
				__germ_tagline="${_tagline}"
				_corrupt=1
			else
				# tagline accepted, remove first line from body
				__germ_tagline=${__germ_array[0]}
				unset __germ_body[0]
				# compare found tagline with _germ_tagline and update _taglist accordingly
				if [[ "${__germ_tagline}" != "${_tagline}" ]]
				then
					_taglist=$(printf '%s' "${__germ_tagline}" | cut -f2 -d'#' | xargs)
				fi
			fi
			
			# check that sourceline is correct "^#src [a-z]*"
			if [[ ! "${__germ_array[-1]}" =~ (^#src [a-zA-Z0-9]) ]]
			then
				# do not slice the last line from the body
				__germ_sourceline="# ${__source_tag}"
				_corrupt=1
			else
				# slice the last line from the body
				__germ_sourceline=${__germ_array[-1]}
				unset __germ_body[-1]
			fi

			# check that no line in body starts with #	
			# TODO this needs fixing
			for __line in ${__germ_body[@]}
			do
				if [[ "${__line}" =~ ^# ]]
				then
					echo "ERROR: germ format error in ${__line}"
				fi
			done

			# if corrupt format detected, rewrite it
			if ((_corrupt))
			then
				# a rather inelegant way of re-building content:
				__germ_content="${__germ_tagline}"$'\n'$(printf '%s\n' "${__germ_body[@]}")$'\n'"#src ${__source_tag}"
				nb germ:edit --overwrite --content "${__germ_content}" "${_new_filename_path}"
			fi

			# compile metadata
			__lines="${#__germ_body[@]}"
			__words=$(printf '%s\n' "${__germ_body[@]}" | wc -w)

			# get the git hash for the last commit
			local _githash=$(nb germ:git rev-parse --short HEAD)

			# check a tag watch list (trigger) for tags entered
			# and do accordingly (ie promote)
			# TODO

			# log the add event
			_gLog add "${__source_tag} ${_new_filename} ${_githash} ${__elapsed} ${__lines} ${__words} ${_taglist}"
			;;

		edit)
			# check for args

			# switch to germ if not...--info-line returns differently
			nb use germ

			# get filename and use as identifier
			local _file_fullpath="$(nb germ:show -p --no-color --path ${_germ_subcommand_args})"
			local _file_name="$(nb germ:show -p --no-color --filename ${_germ_subcommand_args})"
			local _file_name_relativepath="$(nb germ:show -p --no-color --info-line ${_germ_subcommand_args} | awk '{print $2}')"
			local _germ_bucket=$(echo "${_file_name_relativepath}" | cut -f1 -d/)
	
			# get the last commit hash to determine if edit results in changed file	
			local _githash_before=$(nb germ:git rev-parse --short HEAD)
			
			# edit the file
			__start=$(date +%s)
			nb germ:edit "${_file_fullpath}"
			__end=$(date +%s)
			__elapsed=$((__end-__start))
			
			# get the git hash for the last commit
			local _githash=$(nb germ:git rev-parse --short HEAD)
			
			# check if file changed and was committed
			if [[ "${_githash_before}" != "${_githash}" ]]
			then
				# append the final tag list to the tag log
				_tag_list=$(nb germ:show "${_file_fullpath}" --no-color --print | head -1 | cut -f2 -d'#')
				_gLog tag "${_file_name} ${_tag_list}"
				# move the germ from fresh to sifted
				# ONLY IF it file_name_relativepath is fresh/
				if [[ "${_germ_bucket}" = "fresh" ]]
				then
					nb germ:move -f "${_file_name_relativepath}" sifted/
				fi
				# get the git hash for the last commit after the move
				local _githash=$(nb germ:git rev-parse --short HEAD)
				_gLog move "${_githash_before}:${_file_name_relativepath} sifted ${_githash}"
				__words_before=$(nb germ:git show "${_githash_before}:fresh/${_file_name}" | sed '1d;$d' | wc -w)
				__words_after=$(nb germ:git show "${_githash}:sifted/${_file_name}" | sed '1d;$d' | wc -w)
				__added_words=$((__words_after-__words_before))
				__gitdiff_numstat=$(nb germ:git diff --numstat "${_githash_before}:fresh/${_file_name}" "${_githash}:sifted/${_file_name}")
				__insertions=$(echo "${__gitdiff_numstat}" | awk '{print $1}')
				__deletions=$(echo "${__gitdiff_numstat}" | awk '{print $2}')
				# log the session
				_gLog edit "${_githash_before}:${_file_name_relativepath} ${__elapsed} ${__added_words} ${__insertions} ${__deletions} ${_githash}"
			fi
			;;

		import-merge)
			mkdir /tmp/germ-import
			cd /tmp/germ-import
			git init
			dir > deleteme.txt
			git add .
			git commit -m “Initial dummy commit”
			git remote add -f germ-old ~/.nb/germ-old
			git merge germ-old/master
			git rm .deleteme.txt
			git commit -m “Clean up initial file”
			# from https://saintgimp.org/2013/01/22/merging-two-git-repositories-into-one-repository-without-losing-file-history/
			# didnt get it to work...do basic import first
			;;
		import)
			echo "first import implementation...path with germ.txt files"
			echo "nb germ notebook path: ${_germ_subcommand_args[@]}"
			_import_dir=${_germ_subcommand_args[@]}
			_import_dir_contents=$(ls ${_import_dir})
			for __file in ${_import_dir_contents}
			do
				#match germ filename format 2021-01-02--12-31-17-pm.txt
				if [[ $__file =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}--[0-9]{2}-[0-9]{2}-[0-9]{2}-[ap]m.txt$ ]]
				then
					nb germ:import copy "${_import_dir}/${__file}" fresh/
					local _githash=$(nb germ:git rev-parse --short HEAD)
					_gLog import "${_import_dir} ${__file} ${_githash}"
				fi
			done
			# for completeness, will need to copy non-default lines in source.log too
			# do this manually for now
			;;

    init)
      if ((_prompt)) && ! ((_force))
      then
        while true
        do
          IFS='' read -r -e -d $'\n' -p "Initialize germ notebook? [Yn] " __yn
          case ${__yn:-y} in
            [Yy]*)
              break
              ;;
            *)
              printf "Exiting...\\n"
              exit 0
              ;;
          esac
        done
      fi
      # check for germ notbook
      if (_notebooks show germ &>/dev/null)
      then
        _exit_1 printf "germ notebook already exists.\\n"
        exit 1
      else
        printf "Creating germ notebook...\\n"
        _notebooks add germ
				nb germ:add folder fresh
				nb germ:add folder sifted
				nb germ:add folder germinated
				nb germ:add folder dead
				nb germ:add folder logs
				printf "${_germ_version}\n" | nb germ:add -f "germ.version" --folder "logs"
				printf "self:direct entry\n" | nb germ:add -f "source.log" --folder "logs"
				printf "#germlog\n" | nb germ:add -f "germ.log" --folder "logs"
				printf "#publishlog\n" | nb germ:add -f "publish.log" --folder "logs"
				printf "#tagwatch\n" | nb germ:add -f "tagwatch.log" --folder "logs"
        printf "To add additional sources, run 'nb germ source add'.\\n"
				printf "To add content, run 'nb germ add [optional tag list]'.\\n"
      fi
      exit
      ;;
		list|ls)
			_count_fresh=$(nb germ:count fresh/)
			_count_sifted=$(nb germ:count sifted/)
			_count_germinated=$(nb germ:count germinated/)
			_count_dead=$(nb germ:count dead/)
			printf "========= germ =============================================\\n"
			printf "default source: %s\\n" $(nb germ:show --no-color ${_source_log} -p | head -1)
			printf "============================================================\\n"
			nb germ:ls fresh/ --no-header
			printf "==fresh %s===sifted %s====germinated %s=====dead %s=====\\n" ${_count_fresh} ${_count_sifted} ${_count_germinated} ${_count_dead}
			;;
    print)
			nb germ:show -p "${_germ_subcommand_args}"
      ;;
    promote)
      echo "promote: not yet implemented"
      exit
      ;;
		report)
			echo "report not implemented yet"
			echo "what do we want to see?"
			echo "size of logs, size of stores"
			echo "last entry, week's worth of entries count"
			echo "count per classification, eg fresh=..."
			;;
   	source)
			if [[ -z "${_germ_subcommand:-}" ]]
			then
				printf "use 'germ source' to add and manage source media list:\\n"
				printf "usage: 'germ source add'\\n"
				# make sure germ has been initialized		
				if ! (_notebooks show germ &>/dev/null)
				then
					_exit_1 printf "germ notebook missing...run 'germ init'\\n"
				else
					nb germ:show --print "${_source_log}"
				fi
				exit 0
			fi
			case "${_germ_subcommand:-}" in
				add)
					if ((_prompt))
					then
						# get source name
						while read -r -e -d $'\n' -p "name? " __new_source
						do
							case "${__new_source}" in
								help|\?)
									echo "enter the name of the source media type, a-z and 0-9 only"
									echo "example:  self        (for direct entry [default])"
									echo "example:  lgb         (for littlegreenbook pocket notebooks)"
									echo "example:  leaf        (for loose leaf paper scraps)"
									echo "example:  moleskin    (for little black moleskins)"
									echo "example:  composition (for college composition notebooks)"
									;;
								quit|q)
									echo "Quitting..."
									exit 0
									;;
								*)
									if [[ "${__new_source}" =~ ^[a-z0-9]{3,10}$ ]]
									then
										break
									else
										echo "'${__new_source}' is ILLEGAL, lower case and numbers only, 3-10 long"
									fi
									;;
							esac
						done
						# get source date
						while read -r -e -d $'\n' -p "date? " __new_source_date
						do
							case "${__new_source_date}" in
								help|\?)
									echo "enter a date in the form of YYYY-MM-DD eg 2020-10-20"
									echo "enter 'today' as a shortcut for $(date +%F)"
									;;
								quit|q)
									echo "Quitting..."
									exit 0
									;;
								today|now)
									if [[ "${__new_source_date}" == "today" ]]
									then
										__new_source_date=$(date +%F)
										break
									fi
									;;
								*)
									if [[ "${__new_source_date}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]
									then
										break
									else
										echo "'${__new_source_date}' is ILLEGAL"
									fi
									;;
							esac
						done
						# get source description
						while read -r -e -d $'\n' -p "description? " __new_source_description
						do
							case "${__new_source_description}" in
								help|\?)
									echo "enter source description detail"
									echo "example: littlegreenbook 20 oct 2020"
									;;
								quit|q)
									echo "Quitting..."
									exit 0
									;;
								*)
									if [[ "${__new_source_description}" =~ ^([[:alnum:]]*|[[:space:]]?$) ]]
									then
										break
									else
										echo "'${__new_source_description}' is ILLEGAL"
									fi
									;;
							esac
						done
						# make default
						while read -n 1 -r -e -d $'\n' -p "make default? Y/n " __new_source_default
						do
							case "${__new_source_default:-y}" in
								y|Y)
									__new_source_default="y"
									break
									;;
								n|N)
									break
									;;
								*)
									echo "make default, y or n?"
									;;
							esac
						done
					fi
					__new_source_line="${__new_source}.${__new_source_date}:${__new_source_description}"
					if [[ "${__new_source_default}" = "y" ]]
					then
						nb germ:edit "${_source_log}" --prepend --content "${__new_source_line}" 
					else
						printf "${__new_source_line}\\n" |  nb germ:edit "${_source_log}"
					fi
					;;
				edit)
					nb germ:edit "${_source_log}"
					;;
				print)
					case "${_germ_subcommand_args:-}" in
						default)
							nb germ:show -p "${_source_log}" | head -1
							;;
						*)
							nb germ:show -p "${_source_log}"
							;;
					esac
					;;
				*)
					_exit_1 printf "error, illegal command\n"
					;;
			esac
      ;;
    tags)
			case "${_germ_subcommand:-}" in
				add)
					echo "add tags to ?"
					;;
				edit)
					echo "edit tag list?"
					;;
				list)
					nb germ:show tags.log -p
					;;
				*)
					nb germ:show tags.log -p
					;;
			esac
			;;
    thresh)
			local _taglist=()
			#echo ". ${@}"
			#echo "0 ${_germ_subcommand_args[@]}"
			#echo "a ${_germ_subcommand_args[1]:-}"
			#echo "t ${_germ_subcommand_args[@]:2}"
			if [[ -z "${_germ_subcommand:-}" ]] && [[ "${_germ_subcommand_args[0]:-}" == "source" ]]
			then
				_source_override="${_germ_subcommand_args[1]:-}"
				_taglist="${_germ_subcommand_args[@]:2}"
			else
				_taglist="${_germ_subcommand_args[@]}"
			fi
			#echo "_source_override ${_source_override:-}"
			#echo "_taglist ${_taglist:-}"
      exit
      ;;
    *)
      _exit_1 printf "Error: germ command '$_germ_command' unknown.\\n"
      exit 1
  esac
	# write session logs once
	# TODO add trap to catch irishExit and flush logs (incl irishExit entry)
	if [[ "${#_gLog_germlog[@]}" -gt 0 ]]
	then
		printf "%s" "${_gLog_germlog[@]}" | nb ${_germ_nb}:edit ${_germ_log}
	fi
	if [[ "${#_gLog_publishlog[@]}" -gt 0 ]]
	then
		printf "%s" "${_gLog_publishlog[@]}" | nb ${_germ_nb}:edit ${_publish_log}
	fi
exit
}
